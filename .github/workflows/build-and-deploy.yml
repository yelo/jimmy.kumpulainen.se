name: Build, Deploy Infrastructure and App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: './terraform'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    name: 'Provision Infrastructure'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      static_web_app_api_token: ${{ steps.terraform_output.outputs.static_web_app_api_token }}
      static_web_app_url: ${{ steps.terraform_output.outputs.static_web_app_url }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ vars.TERRAFORM_STATE_RG || 'rg-terraform-state' }}" \
            -backend-config="storage_account_name=${{ vars.TERRAFORM_STATE_STORAGE_ACCOUNT || 'stjimmyterraformstate' }}" \
            -backend-config="container_name=${{ vars.TERRAFORM_STATE_CONTAINER || 'terraform-state' }}" \
            -backend-config="key=${{ vars.TERRAFORM_STATE_KEY || 'portfolio.tfstate' }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false \
            -var="resource_group_name=${{ vars.AZURE_RESOURCE_GROUP || 'rg-jimmy-portfolio-prod' }}" \
            -var="location=${{ vars.AZURE_LOCATION || 'West Europe' }}" \
            -var="app_name=${{ vars.APP_NAME || 'jimmy-kumpulainen-portfolio' }}" \
            -var="environment=${{ vars.ENVIRONMENT || 'prod' }}" \
            -var="github_repo_url=${{ github.server_url }}/${{ github.repository }}" \
            -var="github_repo_branch=${{ github.ref_name }}"
        continue-on-error: true

      - name: Comment PR with Terraform Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false \
            -var="resource_group_name=${{ vars.AZURE_RESOURCE_GROUP || 'rg-jimmy-portfolio-prod' }}" \
            -var="location=${{ vars.AZURE_LOCATION || 'West Europe' }}" \
            -var="app_name=${{ vars.APP_NAME || 'jimmy-kumpulainen-portfolio' }}" \
            -var="environment=${{ vars.ENVIRONMENT || 'prod' }}" \
            -var="github_repo_url=${{ github.server_url }}/${{ github.repository }}" \
            -var="github_repo_branch=${{ github.ref_name }}"

      - name: Terraform Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: terraform_output
        run: |
          echo "static_web_app_api_token=$(terraform output -raw static_web_app_api_key)" >> $GITHUB_OUTPUT
          echo "static_web_app_url=$(terraform output -raw static_web_app_url)" >> $GITHUB_OUTPUT

  build_and_deploy_app:
    name: 'Build and Deploy App'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create build directory
        run: mkdir -p build

      - name: Copy source files
        run: cp -r src/* build/

      - name: Install minification tools
        run: |
          sudo apt-get update
          sudo apt-get install -y minify

      - name: Minify HTML files
        run: |
          for file in build/*.html; do
            if [ -f "$file" ]; then
              minify -o "${file}.min" "$file"
              mv "${file}.min" "$file"
            fi
          done

      - name: Minify CSS files
        run: |
          for file in build/css/*.css; do
            if [ -f "$file" ]; then
              minify -o "${file}.min" "$file"
              mv "${file}.min" "$file"
            fi
          done

      - name: Minify JavaScript files
        run: |
          for file in build/js/*.js; do
            if [ -f "$file" ]; then
              minify -o "${file}.min" "$file"
              mv "${file}.min" "$file"
            fi
          done

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ needs.terraform.outputs.static_web_app_api_token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/build"
          output_location: "/"

      - name: Update GitHub Environment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const environment_name = 'production';
            const url = '${{ needs.terraform.outputs.static_web_app_url }}';

            try {
              await github.rest.repos.createOrUpdateEnvironment({
                owner,
                repo,
                environment_name,
                deployment_branch_policy: {
                  protected_branches: true,
                  custom_branch_policies: false
                }
              });

              console.log(`Environment ${environment_name} updated with URL: ${url}`);
            } catch (error) {
              console.log('Error updating environment:', error.message);
            }
