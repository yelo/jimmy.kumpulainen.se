name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: './terraform'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Login to Azure using service principal
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Initialize Terraform
    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ vars.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ vars.TERRAFORM_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ vars.TERRAFORM_STATE_CONTAINER }}" \
          -backend-config="key=${{ vars.TERRAFORM_STATE_KEY }}"

    # Validate Terraform configuration
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generate Terraform plan
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false \
          -var="resource_group_name=${{ vars.AZURE_RESOURCE_GROUP }}" \
          -var="location=${{ vars.AZURE_LOCATION }}" \
          -var="app_name=${{ vars.APP_NAME }}" \
          -var="environment=${{ vars.ENVIRONMENT }}" \
          -var="github_repo_url=${{ github.server_url }}/${{ github.repository }}" \
          -var="github_repo_branch=${{ github.ref_name }}"
      continue-on-error: true

    # Add a comment to pull requests with plan results
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Exit if plan failed
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # Apply Terraform configuration on push to main
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve -input=false \
          -var="resource_group_name=${{ vars.AZURE_RESOURCE_GROUP }}" \
          -var="location=${{ vars.AZURE_LOCATION }}" \
          -var="app_name=${{ vars.APP_NAME }}" \
          -var="environment=${{ vars.ENVIRONMENT }}" \
          -var="github_repo_url=${{ github.server_url }}/${{ github.repository }}" \
          -var="github_repo_branch=${{ github.ref_name }}"

    # Output important information
    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: output
      run: |
        echo "static_web_app_url=$(terraform output -raw static_web_app_url)" >> $GITHUB_OUTPUT
        echo "static_web_app_name=$(terraform output -raw static_web_app_name)" >> $GITHUB_OUTPUT

    # Update GitHub environment with deployment URL
    - name: Update GitHub Environment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const environment_name = 'production';
          const url = '${{ steps.output.outputs.static_web_app_url }}';

          try {
            await github.rest.repos.createOrUpdateEnvironment({
              owner,
              repo,
              environment_name,
              deployment_branch_policy: {
                protected_branches: true,
                custom_branch_policies: false
              }
            });

            console.log(`Environment ${environment_name} updated with URL: ${url}`);
          } catch (error) {
            console.log('Error updating environment:', error.message);
          }
